<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Spin up an EC2, execute playbook and terminate the EC2 instance.</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.11.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.nirima.jenkins.plugins.docker.DockerJobProperty plugin="docker-plugin@0.8">
      <tagOnCompletion>false</tagOnCompletion>
      <additionalTag></additionalTag>
      <pushOnSuccess>false</pushOnSuccess>
      <cleanImages>true</cleanImages>
    </com.nirima.jenkins.plugins.docker.DockerJobProperty>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.10">
      <projectUrl>https://github.com/Magnetic/Ansible/</projectUrl>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>PLAYBOOK</name>
          <description>This project is normally triggered by the parent project.
The playbook to be tested. </description>
          <defaultValue>bbin.yml</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <jenkins.plugins.slack.SlackNotifier_-SlackJobProperty plugin="slack@1.8">
      <teamDomain></teamDomain>
      <token></token>
      <room></room>
      <startNotification>false</startNotification>
      <notifySuccess>false</notifySuccess>
      <notifyAborted>false</notifyAborted>
      <notifyNotBuilt>false</notifyNotBuilt>
      <notifyUnstable>false</notifyUnstable>
      <notifyFailure>false</notifyFailure>
      <notifyBackToNormal>false</notifyBackToNormal>
      <notifyRepeatedFailure>false</notifyRepeatedFailure>
      <includeTestSummary>false</includeTestSummary>
      <showCommitList>false</showCommitList>
      <includeCustomMessage>false</includeCustomMessage>
      <customMessage></customMessage>
    </jenkins.plugins.slack.SlackNotifier_-SlackJobProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@1.8.4">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <hudson.plugins.disk__usage.DiskUsageProperty plugin="disk-usage@0.24"/>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@2.3.1">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>git@github.com:Magnetic/Ansible.git</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>refs/heads/validate-test</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout/>
      <hudson.plugins.git.extensions.impl.DisableRemotePoll/>
    </extensions>
  </scm>
  <assignedNode>master</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/sh
date

#!/bin/sh
echo &quot;Teting playbook: ${PLAYBOOK}&quot;
ansible-playbook playbook-test.yml --vault-password-file=~/.ssh/.vault_pass -t provision -e instance_type=${INSTANCE_TYPE}

date

ansible-playbook -i hosts/playbook-test ${PLAYBOOK} --vault-password-file=~/.ssh/.vault_pass -uroot --private-key=~/.ssh/ansible-playbook-test.pem
RC=$?

date

#INSTANCE_ID=`cat ./instance_to_del`
ansible-playbook -i hosts/playbook-test playbook-test.yml -t decommission -e instance_id=`cat ./instance_to_del`

date
exit $RC</command>
    </hudson.tasks.Shell>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.3">
      <condition class="org.jenkins_ci.plugins.run_condition.core.StatusCondition" plugin="run-condition@1.0">
        <worstResult>
          <name>ABORTED</name>
          <ordinal>4</ordinal>
          <color>ABORTED</color>
          <completeBuild>false</completeBuild>
        </worstResult>
        <bestResult>
          <name>ABORTED</name>
          <ordinal>4</ordinal>
          <color>ABORTED</color>
          <completeBuild>false</completeBuild>
        </bestResult>
      </condition>
      <buildStep class="hudson.tasks.Shell">
        <command>echo &quot;Handling aborted build to clean up EC2 instance&quot;
if [ -f ./instance_to_del ]; then
  INSTANCE_ID=`cat ./instance_to_del`
  ansible-playbook -i hosts/playbook-test playbook-test.yml -t decommission -e instance_id=$INSTANCE_ID
fi
date</command>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
  </builders>
  <publishers/>
  <buildWrappers>
    <EnvInjectBuildWrapper plugin="envinject@1.90">
      <info>
        <propertiesContent>ANSIBLE_HOST_KEY_CHECKING=False</propertiesContent>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
    </EnvInjectBuildWrapper>
  </buildWrappers>
</project>